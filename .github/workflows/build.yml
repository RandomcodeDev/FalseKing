---
name: Build
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
permissions:
  contents: read
jobs:
  build:
    name: ${{matrix.config}}-${{matrix.target}} build on ${{matrix.os}}
    runs-on: ${{matrix.os}}
    if: ${{ !contains(github.event.head_commit.message, 'skip_ci') }}
    strategy:
      matrix:
        config:
          - Debug
          - Release
        target:
          - x64
        os:
          - windows-latest
          - macOS-13
          - ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install system dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt install -y bmake
      - name: chmod scripts
        working-directory: ${{env.GITHUB_WORKSPACE}}
        if: matrix.os != 'windows-latest'
        run: chmod a+x scripts/*.sh
      - name: Download dependencies (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: cmd /c scripts\pulldeps.bat public
      - name: Download dependencies (Unix)
        if: matrix.os != 'windows-latest'
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: scripts/pulldeps.sh public
      #- name: Install Windows XP toolchain
      #  if: matrix.os == 'windows-latest' && matrix.target == 'x64'
      #  working-directory: ${{env.GITHUB_WORKSPACE}}
      #  shell: cmd
      #  run: |
      #    "C:/Program Files (x86)/Microsoft Visual Studio/Installer/setup.exe" modify --installPath "C:/Program Files/Microsoft Visual Studio/2022/Enterprise" --add Microsoft.VisualStudio.Component.WinXP
      - name: Add MSBuild to PATH
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Decode signing key
        if: matrix.os == 'windows-latest'
        shell: bash
        working-directory: ${{env.GITHUB_WORKSPACE}}
        env:
          GAME_PFX_BASE64: ${{secrets.GAME_PFX_BASE64}}
        run: >
          printf "$GAME_PFX_BASE64" > Game_TemporaryKey.pfx.base64

          base64 -d Game_TemporaryKey.pfx.base64 > build/winrt/Game_TemporaryKey.pfx

          rm Game_TemporaryKey.pfx.base64
      - name: Build (MSBuild)
        working-directory: ${{env.GITHUB_WORKSPACE}}
        if: matrix.os == 'windows-latest'
        run: msbuild /m /p:Configuration=${{matrix.config}}
          /p:Platform=${{matrix.target}} build\winrt\Game.sln /t:"Build;Publish"
      #- name: Build (MSBuild Legacy)
      #  working-directory: ${{env.GITHUB_WORKSPACE}}
      #  if: matrix.os == 'windows-latest' && matrix.target == 'x64'
      #  run: msbuild /m /p:Configuration=${{matrix.config}} /p:Platform=x86
      #    build\winxp\Game.sln /t:"Build"
      - name: Build (Make)
        working-directory: ${{env.GITHUB_WORKSPACE}}
        if: matrix.os == 'ubuntu-latest'
        run: scripts/build.sh ${{matrix.target}} ${{matrix.config}}
      
      - name: Install the Apple certificate and provisioning profile
        working-directory: ${{env.GITHUB_WORKSPACE}}
        if: matrix.os == 'macOS-13'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: password
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Build (Xcode)
        working-directory: ${{env.GITHUB_WORKSPACE}}
        if: matrix.os == 'macOS-13'
        run: xcodebuild -project build/darwin/False\ King.xcodeproj -config
          ${{matrix.config}}
      #- name: Distrib (Windows Legacy)
      #  working-directory: ${{env.GITHUB_WORKSPACE}}
      #  if: matrix.os == 'windows-latest' && matrix.target == 'x64'
      #  run: scripts\distrib.bat FalseKing-${{matrix.config}}-${{matrix.os}}-x86 x86
      #    ${{matrix.config}} Game
      - name: Distrib (Linux)
        working-directory: ${{env.GITHUB_WORKSPACE}}
        if: matrix.os == 'ubuntu-latest'
        run: scripts/distrib.sh
          FalseKing-${{matrix.config}}-${{matrix.os}}-${{matrix.target}}
          ${{matrix.target}} ${{matrix.config}} Game
      - name: Upload a Build Artifact (MSBuild Debug)
        uses: actions/upload-artifact@v3.1.2
        if: matrix.os == 'windows-latest' && matrix.config == 'Debug'
        with:
          name: FalseKing-${{matrix.config}}-${{matrix.os}}-${{matrix.target}}
          path: build/winrt/AppPackages/Game/Game_1.0.0.0_Debug_Test
      - name: Upload a Build Artifact (MSBuild Release)
        uses: actions/upload-artifact@v3.1.2
        if: matrix.os == 'windows-latest' && matrix.config == 'Release'
        with:
          name: FalseKing-${{matrix.config}}-${{matrix.os}}-${{matrix.target}}
          path: build/winrt/AppPackages/Game/Game_1.0.0.0_Test
      #- name: Upload a Build Artifact (MSBuild Legacy)
      #  uses: actions/upload-artifact@v3.1.2
      #  if: matrix.os == 'windows-latest' && matrix.target == 'x64'
      #  with:
      #    name: FalseKing-${{matrix.config}}-${{matrix.os}}-x86
      #    path: Game.zip
      - name: Upload a Build Artifact (Xcode)
        uses: actions/upload-artifact@v3.1.2
        if: matrix.os == 'macOS-13'
        with:
          name: FalseKing-${{matrix.config}}-${{matrix.os}}-${{matrix.target}}
          path: build/darwin/build/${{matrix.config}}
      - name: Upload a Build Artifact (Make)
        uses: actions/upload-artifact@v3.1.2
        if: matrix.os == 'ubuntu-latest'
        with:
          name: FalseKing-${{matrix.config}}-${{matrix.os}}-${{matrix.target}}
          path: Game.zip
